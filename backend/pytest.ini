[tool:pytest]
DJANGO_SETTINGS_MODULE = apps.config.settings.test_minimal
python_files = tests.py test_*.py *_test.py *_tests.py
python_classes = Test*
python_functions = test_*

# Core pytest options
addopts =
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --reuse-db
    --nomigrations
    --ds=apps.config.settings.test_minimal
    --maxfail=10
    --durations=10
    --durations-min=1.0

# Parallel execution
# --numprocesses=auto  # Enable when pytest-xdist is installed

# Coverage options (when pytest-cov is used)
# --cov=apps
# --cov-report=html:htmlcov
# --cov-report=term-missing
# --cov-report=xml
--cov-fail-under=50

# Output formatting
console_output_style = progress
junit_family = xunit2

# Test discovery
testpaths = apps tests
python_paths = .
norecursedirs = .git .tox dist build *.egg venv __pycache__ node_modules

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Timeout configuration
timeout = 300
timeout_method = thread

# Markers for test categorization
markers =
    # Performance markers
    slow: marks tests as slow (deselect with -m "not slow")
    fast: marks tests as fast running tests

    # Test type markers
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    functional: marks tests as functional tests
    e2e: marks tests as end-to-end tests

    # Domain markers
    auth: marks tests as authentication related
    api: marks tests as API related
    models: marks tests as model related
    views: marks tests as view related
    middleware: marks tests as middleware related

    # Environment markers
    database: marks tests that require database
    network: marks tests that require network access
    external: marks tests that depend on external services

    # Special markers
    smoke: marks tests as smoke tests for quick validation
    regression: marks tests for regression testing
    security: marks tests for security validation
    performance: marks tests for performance validation
    flaky: marks tests that are known to be flaky

    # Skip conditions
    skip_ci: marks tests to skip in CI environment
    skip_local: marks tests to skip in local development

# Fixtures
usefixtures =
    django_db_setup

# Logging configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test collection
# Note: pytest.ini doesn't support collect_ignore directly
# Use --ignore flags in addopts or configure in conftest.py instead

# Minimum Python version
minversion = 3.8

# Django-specific options
FAIL_INVALID_TEMPLATE_VARS = true
