// Auto-generated API types from OpenAPI schema
// DO NOT EDIT - This file is automatically generated

export interface ApiResponse<T = any> {
  data: T;
  message?: string;
  errors?: Record<string, string[]>;
}

export interface PaginatedResponse<T = any> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
}

// Page Types
export interface Page {
  id: number;
  group_id: string;
  title: string;
  slug: string;
  path: string;
  status: 'draft' | 'published' | 'scheduled';
  locale: any; // Locale object
  parent?: number;
  parentId?: string; // For frontend compatibility
  position: number;
  created_at?: string;
  updated_at: string;
  updatedAt?: string; // For frontend compatibility
  published_at?: string;
  scheduled_publish_at?: string;
  scheduled_unpublish_at?: string;
  seo?: Record<string, any>;
  blocks: any[];
  children_count?: number;
  resolved_seo?: Record<string, any>;
  seo_links?: Record<string, any>;
  in_main_menu?: boolean;
  in_footer?: boolean;
  is_homepage?: boolean;
}

export interface PageSEO {
  title?: string;
  description?: string;
  canonical?: string;
  og_image?: string;
  noindex: boolean;
  nofollow: boolean;
  json_ld?: string;
}

export interface PageCreateRequest {
  title: string;
  slug: string;
  locale: string | number; // Can be locale code or ID
  parent?: number;
  status?: 'draft' | 'published' | 'scheduled';
  scheduled_publish_at?: string;
  scheduled_unpublish_at?: string;
  in_main_menu?: boolean;
  in_footer?: boolean;
  is_homepage?: boolean;
}

export interface PageUpdateRequest extends Partial<PageCreateRequest> {
  blocks?: Block[];
  in_main_menu?: boolean;
  in_footer?: boolean;
  is_homepage?: boolean;
}

export interface ScheduledTask {
  id: number;
  content_type: 'page' | 'blogpost';
  content_id: number;
  content_title: string;
  task_type: 'publish' | 'unpublish';
  scheduled_for: string;
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';
  attempts: number;
  created_by?: string;
  created_at: string;
  error_message?: string;
}

export interface PageRevision {
  id: string;
  created_at: string;
  created_by_email?: string;
  created_by_name?: string;
  is_published_snapshot: boolean;
  is_autosave: boolean;
  comment: string;
  block_count: number;
  revision_type: 'published' | 'autosave' | 'manual';
}

// Block Types
export interface Block {
  id: string;
  type: 'hero' | 'richtext' | 'image' | 'gallery' | 'columns' | 'cta' | 'faq';
  position: number;
  content: Record<string, any>;
  created_at: string;
  updated_at: string;
}

export interface BlockCreateRequest {
  type: Block['type'];
  position: number;
  content: Record<string, any>;
}

// Media Types
export interface MediaAsset {
  id: number;
  name: string;
  type: 'image' | 'video' | 'document';
  mime_type: string;
  size: number;
  url: string;
  thumbnail?: string;
  alt_texts: Record<string, string>;
  title: string;
  description?: string;
  tags: string[];
  uploaded_by: number;
  created_at: string;
  updated_at: string;
}

export interface MediaUploadRequest {
  file: File;
  title?: string;
  description?: string;
  alt_texts?: Record<string, string>;
  tags?: string[];
}

// Translation Types
export interface TranslationUnit {
  id: string;
  key: string;
  model: string;
  object_id: string;
  field: string;
  source_locale: string;
  target_locale: string;
  source_text: string;
  target_text: string;
  status: 'missing' | 'draft' | 'needs_review' | 'approved';
  assignee?: number;
  priority: 'low' | 'medium' | 'high';
  context?: string;
  created_at: string;
  updated_at: string;
}

export interface TranslationUpdateRequest {
  target_text: string;
  status?: TranslationUnit['status'];
}

// User Types
export interface User {
  id: number;
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  is_active: boolean;
  is_staff: boolean;
  is_superuser: boolean;
  role: 'admin' | 'editor' | 'translator' | 'viewer';
  permissions: string[];
  created_at: string;
  updated_at: string;
}

export interface UserCreateRequest {
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  role: User['role'];
  password: string;
}

// Locale Types
export interface Locale {
  code: string;
  name: string;
  native_name: string;
  is_default: boolean;
  is_active: boolean;
  direction: 'ltr' | 'rtl';
  created_at: string;
}

// SEO & Redirects
export interface Redirect {
  id: number;
  from_path: string;
  to_path: string;
  status_code: 301 | 302;
  locale?: string;
  is_active: boolean;
  created_by: number;
  created_at: string;
  updated_at: string;
}

export interface RedirectCreateRequest {
  from_path: string;
  to_path: string;
  status_code: 301 | 302;
  locale?: string;
}

// Audit Log
export interface AuditLogEntry {
  id: number;
  timestamp: string;
  actor: string;
  action: string;
  model: string;
  object_id: string;
  object_repr: string;
  changes: Record<string, any>;
  ip_address: string;
  user_agent: string;
}

// API Error Types
export interface ApiError {
  error: string;
  message: string;
  details?: Record<string, any>;
  timestamp: string;
}

// Common Filter Types
export interface PageFilters {
  locale?: string;
  status?: 'draft' | 'published' | 'scheduled';
  q?: string;
  parent_id?: number;
  page?: number;
  limit?: number;
  ordering?: string;
}

export interface MediaFilters {
  type?: 'image' | 'video' | 'document';
  q?: string;
  tags?: string[];
  uploaded_by?: number;
  page?: number;
  limit?: number;
  ordering?: string;
}

export interface TranslationFilters {
  source_locale?: string;
  target_locale?: string;
  status?: TranslationUnit['status'];
  assignee?: number;
  model?: string;
  priority?: TranslationUnit['priority'];
  q?: string;
  page?: number;
  limit?: number;
}

// HTTP Client Types
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';

export interface RequestConfig {
  method: HttpMethod;
  url: string;
  params?: Record<string, any>;
  data?: any;
  headers?: Record<string, string>;
  signal?: AbortSignal;
}

// CMS Types
export interface Category {
  id: number;
  name: string;
  slug: string;
  description?: string;
  color?: string;
  is_active: boolean;
  post_count?: number;
  created_at: string;
  updated_at: string;
}

export interface CategoryCreateRequest {
  name: string;
  slug?: string;
  description?: string;
  color?: string;
  is_active?: boolean;
}

export interface Tag {
  id: number;
  name: string;
  slug: string;
  description?: string;
  is_active: boolean;
  usage_count: number;
  created_at: string;
  updated_at: string;
}

export interface TagCreateRequest {
  name: string;
  slug?: string;
  description?: string;
  is_active?: boolean;
}

export interface Collection {
  id: number;
  name: string;
  slug: string;
  description?: string;
  items: CollectionItem[];
  is_published: boolean;
  published_at?: string;
  created_at: string;
  updated_at: string;
}

export interface CollectionItem {
  id: number;
  content_type: string;
  object_id: number;
  position: number;
  metadata?: Record<string, any>;
}

export interface CollectionCreateRequest {
  name: string;
  slug?: string;
  description?: string;
  is_published?: boolean;
}

// Blog Types
export interface BlogPost {
  id: number;
  title: string;
  slug: string;
  content: string;
  excerpt?: string;
  featured_image?: string;
  status: 'draft' | 'published' | 'scheduled' | 'archived';
  category?: BlogCategory;
  tags: BlogTag[];
  author: User;
  published_at?: string;
  scheduled_publish_at?: string;
  scheduled_unpublish_at?: string;
  seo: BlogPostSEO;
  view_count: number;
  comment_count: number;
  is_featured: boolean;
  created_at: string;
  updated_at: string;
}

export interface BlogPostSEO {
  title?: string;
  description?: string;
  og_image?: string;
  canonical?: string;
  noindex: boolean;
  nofollow: boolean;
}

export interface BlogPostCreateRequest {
  title: string;
  slug?: string;
  content: string;
  excerpt?: string;
  featured_image?: string;
  status?: BlogPost['status'];
  category_id?: number;
  tag_ids?: number[];
  scheduled_publish_at?: string;
  scheduled_unpublish_at?: string;
  seo?: Partial<BlogPostSEO>;
  is_featured?: boolean;
}

export interface BlogPostRevision {
  id: number;
  post_id: number;
  version: number;
  title: string;
  content: string;
  created_by: User;
  created_at: string;
}

export interface BlogCategory {
  id: number;
  name: string;
  slug: string;
  description?: string;
  color: string;
  post_count: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export interface BlogCategoryCreateRequest {
  name: string;
  slug?: string;
  description?: string;
  color?: string;
  is_active?: boolean;
}

export interface BlogTag {
  id: number;
  name: string;
  slug: string;
  description?: string;
  post_count: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export interface BlogTagCreateRequest {
  name: string;
  slug?: string;
  description?: string;
  is_active?: boolean;
}


// Enhanced Redirect Types
export interface RedirectStats {
  total_redirects: number;
  active_redirects: number;
  redirect_hits: number;
  most_used: Redirect[];
}

export interface RedirectTestResult {
  status: number;
  location?: string;
  final_url?: string;
  redirect_chain?: string[];
  is_working: boolean;
}

export interface RedirectBulkCreateRequest {
  redirects: RedirectCreateRequest[];
  skip_duplicates?: boolean;
}

export interface RedirectImportResult {
  imported: number;
  skipped: number;
  errors: Array<{ row: number; error: string }>;
}

// Analytics Types
export interface PageView {
  id: number;
  page_path: string;
  page_title?: string;
  views: number;
  unique_views: number;
  session_duration?: number;
  bounce_rate?: number;
  date: string;
}

export interface TrafficData {
  total_views: number;
  unique_views: number;
  sessions: number;
  bounce_rate: number;
  avg_session_duration: number;
  top_pages: PageView[];
}

export interface Assessment {
  id: number;
  name: string;
  description: string;
  risk_level: 'low' | 'medium' | 'high' | 'critical';
  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';
  assignee?: User;
  due_date?: string;
  created_by: User;
  created_at: string;
  updated_at: string;
}

export interface AssessmentCreateRequest {
  name: string;
  description: string;
  risk_level: Assessment['risk_level'];
  assignee_id?: number;
  due_date?: string;
}

export interface Risk {
  id: number;
  title: string;
  description: string;
  category: string;
  likelihood: number;
  impact: number;
  risk_score: number;
  status: 'identified' | 'assessed' | 'mitigated' | 'accepted';
  mitigation_plan?: string;
  owner?: User;
  created_at: string;
  updated_at: string;
}

export interface RiskTimelineEntry {
  id: number;
  risk_id: number;
  action: string;
  description: string;
  actor: User;
  created_at: string;
}

export interface Threat {
  id: number;
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  source: string;
  status: 'active' | 'monitoring' | 'resolved';
  detected_at: string;
  resolved_at?: string;
}

export interface ThreatStats {
  total_threats: number;
  active_threats: number;
  resolved_threats: number;
  critical_threats: number;
}

export interface AnalyticsSummary {
  traffic: TrafficData;
  threats: ThreatStats;
  active_assessments: number;
  high_risk_items: number;
}

// User & Role Management Types
export interface Role {
  id: number;
  name: string;
  description?: string;
  permissions: Permission[];
  is_system: boolean;
  user_count: number;
  created_at: string;
  updated_at: string;
}

export interface RoleCreateRequest {
  name: string;
  description?: string;
  permission_ids: number[];
}

export interface Permission {
  id: number;
  name: string;
  content_type: string;
  codename: string;
  description?: string;
}

export interface UserInviteRequest {
  email: string;
  role?: string;  // Optional single role name (backward compatibility)
  roles?: number[];  // Optional multiple role IDs (preferred)
  message?: string;  // Optional custom message in the invitation email
}

export interface Scope {
  name: string;
  description: string;
  permissions: string[];
}

// Enhanced i18n Types
export interface TranslationGlossaryEntry {
  id: number;
  term: string;
  definition: string;
  context?: string;
  locale: string;
  created_by: User;
  created_at: string;
  updated_at: string;
}

export interface TranslationGlossaryCreateRequest {
  term: string;
  definition: string;
  context?: string;
  locale: string;
}

export interface TranslationQueueItem {
  id: number;
  translation_unit: TranslationUnit;
  priority: 'low' | 'medium' | 'high';
  assignee?: User;
  due_date?: string;
  status: 'pending' | 'in_progress' | 'completed';
  created_at: string;
}

export interface UiMessageNamespace {
  namespace: string;
  message_count: number;
  completion_rate: number;
}

export interface UiMessageBulkUpdate {
  updates: Array<{
    key: string;
    locale: string;
    message: string;
  }>;
}

// Filter Types
export interface CategoryFilters {
  is_active?: boolean;
  search?: string;
  page?: number;
  limit?: number;
  ordering?: string;
}

export interface TagFilters {
  is_active?: boolean;
  q?: string;
  page?: number;
  limit?: number;
  ordering?: string;
}

export interface CollectionFilters {
  is_published?: boolean;
  q?: string;
  page?: number;
  limit?: number;
  ordering?: string;
}

export interface BlogPostFilters {
  status?: BlogPost['status'];
  category_id?: number;
  tag_ids?: number[];
  author_id?: number;
  q?: string;
  is_featured?: boolean;
  published_after?: string;
  published_before?: string;
  page?: number;
  limit?: number;
  ordering?: string;
}

export interface RedirectFilters {
  status_code?: 301 | 302;
  is_active?: boolean;
  locale?: string;
  q?: string;
  page?: number;
  limit?: number;
  ordering?: string;
}

export interface AnalyticsFilters {
  start_date?: string;
  end_date?: string;
  path?: string;
  page?: number;
  limit?: number;
}

export interface AssessmentFilters {
  risk_level?: Assessment['risk_level'];
  status?: Assessment['status'];
  assignee_id?: number;
  due_before?: string;
  due_after?: string;
  page?: number;
  limit?: number;
  ordering?: string;
}

export interface UserFilters {
  role?: string;
  is_active?: boolean;
  q?: string;
  page?: number;
  limit?: number;
  ordering?: string;
}

// Authentication Types
export interface AuthTokens {
  access: string;
  refresh: string;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  tokens: AuthTokens;
  user: User;
}