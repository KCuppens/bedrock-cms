[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | env
  | ENV
  | \.env
  | backend/venv
  | backend/\.venv
  | backend/env
  | frontend/node_modules
  | frontend/dist
  | frontend/build
  | \.tox
  | dist
  | build
  | \.egg
  | \.eggs
  | \.pytest_cache
  | \.mypy_cache
  | htmlcov
  | \.coverage
  | migrations
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 88
skip = [
    ".venv",
    "venv", 
    "env",
    "ENV",
    ".env",
    "backend/venv",
    "backend/.venv",
    "frontend/node_modules",
    ".tox",
    "dist",
    "build",
    ".eggs",
    "migrations"
]
skip_glob = ["*/migrations/*", "*/venv/*"]
known_django = ["django", "rest_framework"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.9"
exclude = [
    "venv",
    ".venv",
    "env",
    "ENV",
    "backend/venv",
    "backend/.venv",
    "migrations",
    "frontend",
    "node_modules",
    "build",
    "dist"
]
ignore_missing_imports = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["backend/tests", "backend/apps"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--ignore=venv",
    "--ignore=.venv",
    "--ignore=backend/venv",
    "--ignore=frontend",
    "--ignore=node_modules"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "env",
    "ENV",
    ".env",
    "backend/venv",
    "backend/.venv",
    "backend/env",
    "frontend/node_modules",
    "frontend/dist",
    "frontend/build",
    ".tox",
    "dist",
    "build",
    "*.egg",
    ".eggs",
    ".pytest_cache",
    ".mypy_cache",
    "htmlcov",
    ".coverage",
    "migrations",
    "staticfiles",
    "media"
]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"*/settings/*.py" = ["F401", "F403", "E501"]
"*/tests/*.py" = ["E501", "F401"]
"*/test_*.py" = ["E501", "F401"]

[tool.coverage.run]
omit = [
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/ENV/*",
    "*/backend/venv/*",
    "*/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/staticfiles/*",
    "*/media/*",
    "*/frontend/*",
    "*/node_modules/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:"
]

[tool.bandit]
exclude_dirs = [
    "venv",
    ".venv",
    "env",
    "ENV",
    "backend/venv",
    "backend/.venv",
    "tests",
    "test",
    "migrations",
    "frontend",
    "node_modules"
]
skips = [
    "B101",  # assert_used
    "B601",  # shell_true
    "B602",  # subprocess_popen_with_shell_equals_true
    "B603",  # subprocess_without_shell_equals_true
    "B607"   # start_process_with_partial_path
]