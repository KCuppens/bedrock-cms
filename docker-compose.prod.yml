version: '3.8'

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: .
      target: production
    image: bedrock-cms:latest
    volumes:
      - static_volume:/app/backend/staticfiles
      - media_volume:/app/backend/media
      - ./logs:/var/log/bedrock
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=apps.config.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/1
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CDN_URL=${CDN_URL}
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}
      - CELERY_ENABLED=true
      - NGINX_ENABLED=false  # Using external nginx/load balancer
      - WARM_CACHE=true
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - backend
      - frontend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  celery_worker:
    build:
      context: .
      target: production
    image: bedrock-cms:latest
    volumes:
      - media_volume:/app/backend/media
      - ./logs:/var/log/bedrock
    environment:
      - DJANGO_SETTINGS_MODULE=apps.config.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/1
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - backend
    command: celery -A apps.config worker -l info -Q default,publishing,translations,maintenance --concurrency=4
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  celery_beat:
    build:
      context: .
      target: production
    image: bedrock-cms:latest
    volumes:
      - ./logs:/var/log/bedrock
    environment:
      - DJANGO_SETTINGS_MODULE=apps.config.settings.production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/1
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - backend
    command: celery -A apps.config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    deploy:
      replicas: 1

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/backend/staticfiles:ro
      - media_volume:/app/backend/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - frontend
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
